*,
*::before,
*::after {
  box-sizing: border-box;
}

// Theme variables
$primaryBackground: #fff;
$primaryPageBackground: #f5f2f2;
$primaryGreen: rgba(44, 208, 177, 0.83);

// Breakpoints map
$small: 26rem;
$medium: 40rem;
$large: 60rem;

$breakpoints: (
  sm: $small,
  md: $medium,
  lg: $large
);

// Number of columns variable
$items: 12;

// Basic dom elements styling
body {
    margin: 0;
    background-color: $primaryBackground;
    font-size: 9px;
}
.alignRightImportant {
  text-align: center;

  @media (min-width: $large) {
    text-align: right !important;
  }
}
.greyText {
  color: grey;
}
.greenText {
  color: $primaryGreen;
}
.bigText {
  font-size: 12px; 
}
.boldText {
  font-weight: 700;
}
.clearPadding {
  padding: 0;
}

.centerElement {
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}

#root {
  background-color: $primaryPageBackground;
  width: 100%;
  height: 100%;
}

p {
  margin: 0px;
}

// Shadowing
.basicShadow {
  -webkit-box-shadow: 0px 0px 5px 0px rgb(193, 193, 193);
  -moz-box-shadow: 0px 0px 5px 0px rgb(193, 193, 193);
  box-shadow: 0px 0px 5px 0px rgb(193, 193, 193);
}

.boxShadow {
  -webkit-box-shadow: 0px 3px 6px -2px rgba(153,151,153,1);
  -moz-box-shadow: 0px 3px 6px -2px rgba(153,151,153,1);
  box-shadow: 0px 3px 6px -2px rgba(153,151,153,1);
  border-radius: 5px;
}

// Media query mixin
@mixin break($size) {  
  @media (min-width: map-get($breakpoints, $size)) {
    @content;
  }
}

// Grid container
.row-grid {
  display: flex;
  flex-flow: row wrap;
}

// Grid item
.col-item {
  padding: 0.5rem;
  flex: 0 0 100%; // default
  
  /*
  &:nth-child(even) {
    background-color: #eee;
  }
  &:nth-child(odd) {
    background-color: #ddd;
  }
  */
}

// Generating breakpoints medias
@each $key, $value in $breakpoints {
  body {
    @include break($key) {
      padding: 0 #{1/$items * 100%} 0 #{1/$items * 100%};
      }
  }
  
  @for $i from 1 through $items {
    .#{$key}-cover-#{$i} {
      @include break($key) {
        flex: 0 0 #{$i / $items * 100%};  // adaptive
      }
    }
  }
}